# WirePlumber daemon context configuration #

context.properties = {
  ## Properties to configure the PipeWire context and some modules

  #application.name = WirePlumber
  log.level = 2
  wireplumber.script-engine = lua-scripting
  #wireplumber.export-core = true

  #mem.mlock-all = false
  #support.dbus  = true
}

context.spa-libs = {
  #<factory-name regex> = <library-name>
  #
  # Used to find spa factory names. It maps an spa factory name
  # regular expression to a library name that should contain
  # that factory.
  #
  api.alsa.*      = alsa/libspa-alsa
  api.bluez5.*    = bluez5/libspa-bluez5
  api.v4l2.*      = v4l2/libspa-v4l2
  api.libcamera.* = libcamera/libspa-libcamera
  audio.convert.* = audioconvert/libspa-audioconvert
  support.*       = support/libspa-support
}

context.modules = [
  #{   name = <module-name>
  #    [ args = { <key> = <value> ... } ]
  #    [ flags = [ [ ifexists ] [ nofail ] ]
  #}
  #
  # PipeWire modules to load.
  # If ifexists is given, the module is ignored when it is not found.
  # If nofail is given, module initialization failures are ignored.
  #

  # Uses RTKit to boost the data thread priority.
  { name = libpipewire-module-rt
      args = {
          nice.level   = -11
          #rt.prio      = 88
          #rt.time.soft = -1
          #rt.time.hard = -1
      }
      flags = [ ifexists nofail ]
  }

  # The native communication protocol.
  { name = libpipewire-module-protocol-native }

  # Allows creating nodes that run in the context of the
  # client. Is used by all clients that want to provide
  # data to PipeWire.
  { name = libpipewire-module-client-node }

  # Allows creating devices that run in the context of the
  # client. Is used by the session manager.
  { name = libpipewire-module-client-device }

  # Makes a factory for wrapping nodes in an adapter with a
  # converter and resampler.
  { name = libpipewire-module-adapter }

  # Allows applications to create metadata objects. It creates
  # a factory for Metadata objects.
  { name = libpipewire-module-metadata }

  # Provides factories to make session manager objects.
  { name = libpipewire-module-session-manager }

  # Provides factories to make SPA node objects.
  { name = libpipewire-module-spa-node-factory }
]

wireplumber.components = [
  # This main config file is only supposed to contain the common components.
  # rest of them are distributed across wireplumber.conf.d/*-settings.conf
  # files.

  #{ name = <component-name>, type = <component-type>, deps = <dependent-setting>, flags = <flags> }
  #
  # WirePlumber components to load
  #

  # The lua scripting engine
  { name = libwireplumber-module-lua-scripting, type = module }

  # Provide the "default" pw_metadata, which stores
  # dynamic properties of pipewire objects in RAM
  { name = libwireplumber-module-metadata, type = module }

  # Link nodes by stream role and device intended role
  { name = intended-roles.lua, type = script/lua }

  # Automatically suspends idle nodes after 3 seconds
  { name = suspend-node.lua, type = script/lua }
]

wireplumber.settings = {

  # This main config file is only supposed to contain the common settings and
  # rules. rest of the settings and rules are distributed across
  # wireplumber.conf.d/*-settings.conf files.

  # if "persistent.settings" is true, the settings will be read from conf file
  # only once and for subsequent reboots they will be read from the state files,
  # till the time the setting is set to false.
  #
  persistent.settings = false
}

wireplumber.endpoints = {
  # endpoints = {
  #   endpoint.capture = {
  #     media.class = "Audio/Source"
  #     role = "Capture"
  #   }
  #   endpoint.multimedia = {
  #     media.class = "Audio/Sink"
  #     role = "Multimedia"
  #   }
  #   endpoint.speech_low = {
  #     media.class = "Audio/Sink"
  #     role = "Speech-Low"
  #   }
  #   endpoint.custom_low = {
  #     media.class = "Audio/Sink"
  #     role = "Custom-Low"
  #   }
  #   endpoint.navigation = {
  #     media.class = "Audio/Sink"
  #     role = "Navigation"
  #   }
  #   endpoint.speech_high = {
  #     media.class = "Audio/Sink"
  #     role = "Speech-High"
  #   }
  #   endpoint.custom_high = {
  #     media.class = "Audio/Sink"
  #     role = "Custom-High"
  #   }
  #   endpoint.communication = {
  #     media.class = "Audio/Sink"
  #     role = "Communication"
  #   }
  #   endpoint.emergency = {
  #     media.class = "Audio/Sink"
  #     role = "Emergency"
  #   }
  # }

  # endpoints-roles = {
  #   Capture = {
  #     alias = [ "Multimedia", "Music", "Voice", "Capture" ]
  #     priority = 25
  #     action.default = "cork"
  #     action.capture = "mix"
  #     media.class = "Audio/Source"
  #   }
  #   Multimedia = {
  #     alias = [ "Movie" "Music" "Game" ]
  #     priority = 25
  #     action.default = "cork"
  #   }
  #   Speech-Low = {
  #     priority = 30
  #     action.default = "cork"
  #     action.Speech-Low = "mix"
  #   }
  #   Custom-Low = {
  #     priority = 35
  #     action.default = "cork"
  #     action.Custom-Low = "mix"
  #   }
  #   Navigation = {
  #     priority = 50
  #     action.default = "duck"
  #     action.Navigation = "mix"
  #   }
  #   Speech-High = {
  #     priority = 60
  #     action.default = "cork"
  #     action.Speech-High = "mix"
  #   }
  #   Custom-High = {
  #     priority = 65
  #     action.default = "cork"
  #     action.Custom-High = "mix"
  #   }
  #   Communication = {
  #     priority = 75
  #     action.default = "cork"
  #     action.Communication = "mix"
  #   }
  #   Emergency = {
  #     alias = [ "Alert" ]
  #     priority = 99
  #     action.default = "cork"
  #     action.Emergency = "mix"
  #   }
  # }
}

